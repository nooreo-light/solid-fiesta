#include <iostream>
#include <cmath>
using namespace std;

// Function to check if placing a queen at position q[c] is safe
bool ok(int q[], int c) {
    for (int i = 0; i < c; i++) {
        if ((q[i] == q[c]) || (abs(q[i] - q[c]) == (c - i))) // Row or diagonal conflict
            return false;
    }
    return true;
}

// Function to print the board configuration
void printBoard(int q[], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (q[i] == j) // Place the queen (Q)
                cout << " Q ";
            else // Empty space
                cout << " . ";
        }
        cout << endl; // New line after each row
    }
    cout << "---------------------------------\n"; // Separator line after each solution
}

// This function finds and prints all solutions for the N-Queens problem
int nqueens(int n, int q[], int c) {
    if (c == n) {  // If a solution is found (placed queens in all columns)
        printBoard(q, n); // Print the current board configuration
        return 1; // Count this solution
    }

    int sum = 0; // Initialize sum of solutions
    for (int i = 0; i < n; i++) {
        q[c] = i; // Place queen in row i of column c
        if (ok(q, c)) { // If no conflict, move to the next column
            sum += nqueens(n, q, c + 1); // Recur to place next queen
        }
    }
    return sum; // Return the number of solutions found
}

int main() {
    int n;
    cout << "Enter a positive integer n: ";
    cin >> n;

    int* q = new int[n]; // Dynamically allocate array to store queen positions
    int solutions = nqueens(n, q, 0); // Start the N-Queens search from the first column

    cout << "There are " << solutions << " solutions to the " << n << " queens problem.\n";

    delete[] q; // Clean up the dynamically allocated array
    return 0;
}
